{
	"info": {
		"_postman_id": "1389b02d-d884-4cd8-8f3b-0b85c23a8c1b",
		"name": "task-manager-app-regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41169784"
	},
	"item": [
		{
			"name": "Create Task (Happy Flow)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"A task\",\r\n    \"description\": \"Description of task\",\r\n    \"status\": \"Pending\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task (Error - Empty Request Body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Validation Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Task data is required\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task (Error - Invalid Task Status)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Validation Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Invalid status value\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"A task\",\r\n    \"description\": \"Description of task\",\r\n    \"status\": \"Completed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task (Error - Null Task Title and Description)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Validation Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Title and description are required\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"Pending\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Task (Happy Flow)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"const taskId = responseData[0].id;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.environment.set(\"id\", taskId);\r",
							"\r",
							"pm.test(\"Value extracted successfully\", function() {\r",
							"    pm.expect(taskId).to.exist;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task (Happy Flow)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"This task got updated\",\r\n    \"description\": \"Description of task\",\r\n    \"status\": \"Completed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task (Error - Invalid Task Id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Validation Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Invalid task ID\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"This task got updated\",\r\n    \"description\": \"Description of task\",\r\n    \"status\": \"Completed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks/abc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task (Error - Invalid Task Status)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Validation Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Invalid status value\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"This task got updated\",\r\n    \"description\": \"Description of task\",\r\n    \"status\": \"Task\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task (Error - Null Task Title and Description)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Validation Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Title and description are required\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"Pending\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task (Error - Task Id Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Resource Not Found Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Task with id 101 not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"This task got updated\",\r\n    \"description\": \"Description of task\",\r\n    \"status\": \"Completed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/tasks/101",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"101"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task (Happy Flow)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is empty\", function () {\r",
							"    pm.expect(pm.response.text()).empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/tasks/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task (Error - Invalid Task Id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Validation Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Invalid task ID\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/tasks/abc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task (Error - Task Id Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data in response\", function() {\r",
							"    pm.expect(responseData.error).to.equal(\"Resource Not Found Error\");\r",
							"    pm.expect(responseData.message).to.equal(\"Task with id 101 not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/tasks/101",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"tasks",
						"101"
					]
				}
			},
			"response": []
		}
	]
}